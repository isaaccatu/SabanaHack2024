% Definir las variables
duracion = 10; % Puedes cambiar esto al número de segundos que necesites
tiempo = (1:duracion)'; % Generar una serie de tiempo de 1 a duracion

% Generar datos de ejemplo (puedes reemplazar esto con tus propios datos)
datos = rand(duracion, 1); % Generar datos aleatorios como ejemplo

% Ajustar un modelo de regresión lineal
modelo = fitlm(tiempo, datos);

% Predicción a futuro
prediccion_hasta = 20; % Cuántos segundos en el futuro quieres predecir
tiempo_futuro = (1:prediccion_hasta)'; 
predicciones = predict(modelo, tiempo_futuro);

% Visualizar el modelo y las predicciones
figure;
hold on;
plot(tiempo, datos, 'bo', 'DisplayName', 'Datos Actuales');
plot(tiempo_futuro, predicciones, 'r-', 'DisplayName', 'Predicción');
xlabel('Tiempo (segundos)');
ylabel('Valor');
legend;
title('Modelo Predictivo en MATLAB');
hold off;

%%
% Definir las variables
duracion = 200; % Número total de puntos de datos
tiempo = (1:duracion)'; 

% Generar datos que aumentan linealmente hasta 100 y luego disminuyen
max_valor = 100;
mitad_duracion = round(duracion / 2);
datos = [linspace(1, max_valor, mitad_duracion)'; linspace(max_valor, 1, duracion - mitad_duracion)'];

% Ajustar un modelo de regresión lineal
modelo = fitlm(tiempo, datos);

% Predicción a futuro
prediccion_hasta = 250; % Cuántos segundos en el futuro quieres predecir
tiempo_futuro = (1:prediccion_hasta)'; 
predicciones = predict(modelo, tiempo_futuro);

% Visualizar el modelo y las predicciones
figure;
hold on;
plot(tiempo, datos, 'bo', 'DisplayName', 'Datos Actuales');
plot(tiempo_futuro, predicciones, 'r-', 'DisplayName', 'Predicción');
xlabel('Tiempo (segundos)');
ylabel('Valor');
legend;
title('Modelo Predictivo en MATLAB');
hold off;

%%
% Definir las variables
duracion = 200; % Número total de puntos de datos
tiempo = (1:duracion)';

% Generar datos que aumentan linealmente hasta 100 y luego disminuyen
max_valor = 100;
mitad_duracion = round(duracion / 2);
datos = [linspace(1, max_valor, mitad_duracion)'; linspace(max_valor, 1, duracion - mitad_duracion)'];

% Añadir aleatoriedad
aleatoriedad = randn(duracion, 1) * 5; % Aleatoriedad con desviación estándar de 5
datos_aleatorios = datos + aleatoriedad;

% Ajustar un modelo de regresión lineal
modelo = fitlm(tiempo, datos_aleatorios);

% Predicción a futuro
prediccion_hasta = 250; % Cuántos segundos en el futuro quieres predecir
tiempo_futuro = (1:prediccion_hasta)'; 
predicciones = predict(modelo, tiempo_futuro);

% Visualizar el modelo y las predicciones
figure;
hold on;
plot(tiempo, datos_aleatorios, 'bo', 'DisplayName', 'Datos Actuales con Aleatoriedad');
plot(tiempo_futuro, predicciones, 'r-', 'DisplayName', 'Predicción');
xlabel('Tiempo (segundos)');
ylabel('Valor');
legend;
title('Modelo Predictivo con Aleatoriedad en MATLAB');
hold off;

%%
% Definir las variables
duracion = 500; % Número total de puntos de datos
tiempo = (1:duracion)';

% Generar datos con comportamiento exponencial
max_valor = 100;
datos = max_valor * (exp(tiempo / max(tiempo)) - 1) / (exp(1) - 1); 

% Añadir aleatoriedad
aleatoriedad = randn(duracion, 1) * 5; % Aleatoriedad con desviación estándar de 5
datos_aleatorios = datos + aleatoriedad;

% Ajustar un modelo de regresión lineal
modelo = fitlm(tiempo, datos_aleatorios);

% Predicción a futuro
prediccion_hasta = 500; % Cuántos segundos en el futuro quieres predecir
tiempo_futuro = (1:prediccion_hasta)'; 
predicciones = predict(modelo, tiempo_futuro);

% Visualizar el modelo y las predicciones
figure;
hold on;
plot(tiempo, datos_aleatorios, 'bo', 'DisplayName', 'Datos Actuales con Aleatoriedad');
plot(tiempo_futuro, predicciones, 'r-', 'DisplayName', 'Predicción');
xlabel('Tiempo (segundos)');
ylabel('Valor');
legend;
title('Modelo Predictivo con Comportamiento Exponencial y Aleatoriedad en MATLAB');
hold off;

%%
% Definir las variables
duracion = 1000; % Número total de puntos de datos
tiempo = (1:duracion)';

% Generar datos con comportamiento exponencial decreciente
datos = 150 * log(tiempo); 

% Añadir aleatoriedad
aleatoriedad = randn(duracion, 1) ; % Aleatoriedad con desviación estándar de 5
datos_aleatorios = datos + aleatoriedad;

% Ajustar un modelo de regresión lineal
modelo = fitlm(tiempo, datos_aleatorios);

% Predicción a futuro
prediccion_hasta = 1500; % Cuántos segundos en el futuro quieres predecir
tiempo_futuro = (1:prediccion_hasta)'; 
predicciones = predict(modelo, tiempo_futuro);

% Visualizar el modelo y las predicciones
figure;
hold on;
plot(tiempo, datos_aleatorios, 'bo', 'DisplayName', 'Datos Actuales con Aleatoriedad');
plot(tiempo_futuro, predicciones, 'r-', 'DisplayName', 'Predicción');
xlabel('Tiempo (segundos)');
ylabel('Valor');
legend;
title('Modelo Predictivo con Comportamiento Exponencial Decreciente y Aleatoriedad en MATLAB');
hold off;

%%
% Definir el rango de x para cada segmento
x1 = linspace(1, 1000, 500);
x2 = linspace(1000, 2000, 500);

% Crear las funciones
y1 = log(x1); % Logarítmica de 0 a 1000
y2 = log(1000) * exp(-0.001 * (x2 - 1000)); % Decrecimiento lento después de 1000

% Unir las funciones y los rangos
x = [x1 x2];
y = [y1 y2];

% Graficar la función a trozos
plot(x, y)
xlabel('x')
ylabel('y')
title('Función a Trozos: log(x) y Decrecimiento Lento')
grid on

%%
% Definir el rango de x para cada segmento
x1 = linspace(1, 1000, 500);
x2 = linspace(1000, 2000, 500);

% Crear las funciones base
y1_base = log(x1); % Logarítmica de 0 a 1000
y2_base = log(1000) * exp(-0.001 * (x2 - 1000)); % Decrecimiento lento después de 1000

% Agregar ruido aleatorio a los datos
noise1 = 0.1 * randn(size(y1_base));
noise2 = 0.1 * randn(size(y2_base));

y1 = y1_base + noise1;
y2 = y2_base + noise2;

% Unir las funciones y los rangos
x = [x1 x2];
y = [y1 y2];

% Graficar la función a trozos con datos aleatorios
plot(x, y, 'o')
xlabel('x')
ylabel('y')
title('Datos Aleatorios con Comportamiento Definido')
grid on

%%
% Definir el rango de x para cada segmento
x1 = linspace(1, 1000, 500);
x2 = linspace(1000, 2000, 500);

% Crear las funciones base
y1_base = log(x1); % Logarítmica de 0 a 1000
y2_base = log(1000) * exp(-0.001 * (x2 - 1000)); % Decrecimiento lento después de 1000

% Agregar ruido aleatorio a los datos
noise1 = 0.1 * randn(size(y1_base));
noise2 = 0.1 * randn(size(y2_base));

y1 = y1_base + noise1;
y2 = y2_base + noise2;

% Unir las funciones y los rangos
x = [x1 x2];
y = [y1 y2];

% Ajuste de la curva para la parte logarítmica
coeffs1 = polyfit(x1, y1, 2); % Ajuste cuadrático como ejemplo
y_fit1 = polyval(coeffs1, x1);

% Ajuste de la curva para la parte decreciente
coeffs2 = polyfit(x2, y2, 2); % Ajuste cuadrático como ejemplo
y_fit2 = polyval(coeffs2, x2);

% Graficar los datos y el ajuste
figure;
plot(x, y, 'o'); hold on;
plot(x1, y_fit1, '-r', 'LineWidth', 2);
plot(x2, y_fit2, '-b', 'LineWidth', 2);
xlabel('x');
ylabel('y');
title('Datos Aleatorios y su Ajuste de Curva');
legend('Datos', 'Ajuste Log(x)', 'Ajuste Decrecimiento Lento');
grid on;

% Predicción de valores futuros
x_future = linspace(2000, 2500, 100);
y_future = polyval(coeffs2, x_future);

% Graficar predicción futura
figure;
plot(x_future, y_future, '-g', 'LineWidth', 2);
xlabel('x');
ylabel('y');
title('Predicción de Comportamiento Futuro');
grid on;

%%
% Definir el rango de x para cada segmento
x1 = linspace(1, 1000, 500);
x2 = linspace(1000, 1200, 500);

% Crear las funciones base
y1_base = log(x1); % Logarítmica de 0 a 1000
y2_base = log(1000) * exp(-0.001 * (x2 - 1000)); % Decrecimiento lento después de 1000

% Agregar ruido aleatorio a los datos
noise1 = 0.1 * randn(size(y1_base));
noise2 = 0.1 * randn(size(y2_base));

y1 = y1_base + noise1;
y2 = y2_base + noise2;

% Unir las funciones y los rangos
x = [x1 x2];
y = [y1 y2];
X = [x1 x2];

% Ajuste de la curva para toda la serie de datos
coeffs = polyfit(x, y, 4); % Ajuste polinómico de grado 4 como ejemplo
y_fit = polyval(coeffs, x);

% Graficar los datos y el ajuste
plot(x, y, 'o'); hold on;
plot(X, y_fit, '-r', 'LineWidth', 2);
xlabel('x');
ylabel('y');
title('Datos Aleatorios y su Ajuste de Curva Único');
legend('Datos', 'Ajuste Polinómico');
grid on;

%%
% Definir el rango de x para cada segmento
x1 = linspace(1, 1000, 500);
x2 = linspace(1000, 2000, 500);

% Crear las funciones base
y1_base = log(x1); % Logarítmica de 0 a 1000
y2_base = log(1000) * exp(-0.001 * (x2 - 1000)); % Decrecimiento lento después de 1000

% Agregar ruido aleatorio a los datos
noise1 = 0.1 * randn(size(y1_base));
noise2 = 0.1 * randn(size(y2_base));

y1 = y1_base + noise1;
y2 = y2_base + noise2;

% Unir las funciones y los rangos
x = [x1 x2];
y = [y1 y2];

% Ajuste de la curva para toda la serie de datos
coeffs = polyfit(x, y, 4); % Ajuste polinómico de grado 4 como ejemplo
y_fit = polyval(coeffs, x);

% Graficar los datos y el ajuste
plot(x, y, 'o'); hold on;
plot(x, y_fit, '-r', 'LineWidth', 2);
xlabel('x');
ylabel('y');
title('Datos Aleatorios y su Ajuste de Curva Único');
legend('Datos', 'Ajuste Polinómico');
grid on;

% Predicción de valores futuros
x_future = linspace(2000, 3000, 200); % Extender el rango de predicción
y_future = polyval(coeffs, x_future);

% Graficar predicción futura
figure;
plot(x_future, y_future, '-g', 'LineWidth', 2);
xlabel('x');
ylabel('y');
title('Predicción de Comportamiento Futuro');
grid on;

%%
% Definir el rango de x para los datos
x_data = linspace(1, 1200, 500);

% Crear las funciones base
y_base = log(x_data); % Logarítmica

% Agregar ruido aleatorio a los datos
noise = 0.1 * randn(size(y_base));
y_data = y_base + noise;

% Ajuste de la curva para los datos disponibles
coeffs = polyfit(x_data, y_data, 4); % Ajuste polinómico de grado 4
x_fit = linspace(1, 1500, 1000); % Extender el rango de x para el ajuste
y_fit = polyval(coeffs, x_fit);

y_data = y_data*10;
y_fit = y_fit*10;

% Graficar los datos y el ajuste
plot(x_data, y_data, 'o'); hold on;
plot(x_fit, y_fit, '-r', 'LineWidth', 2);
xlabel('# de lavados realizados');
ylabel('Tiempo total de lavado (s)');
title('Tiempo total de lavado con un Ajuste Polinómico con Extensión de Rango');
legend('Tiempo (s)', 'Ajuste Polinómico');
grid on;
